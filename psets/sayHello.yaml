---

##########################
## IMPLEMENTATION NOTES ##
##########################
# - Any values that will be used as Apex statements should be properly terminated with a semi-colon. 
# - Multi-line literal blocks, a la 'scaffold' values, are recommended to be wrapped in double quotes as YAML allows more
# escape sequences than values wrapped in single quotes.

# **REQUIRED** Each pset must correlate to one apex class, whose name is represented by apexName.
apexName: SayHello

# **OPTIONAL**
# This value is used by the ZS50 command `ZS50 scaf <psetName>` to print out a scaffolded class structure / instructions for completing
# the pset. It is recommended that scaffold values be YAML literal blocks. 
scaffold: |
  "public class SayHello {

    public String sayHi(){
      // TODO initialize a string with value 'Hello, World' 
      // write it to Apex debug logs
      // return it
    }

    // implement a public method sayMyName() that...
    // returns a String with your name 

    // implement a public method speak() that...
    // 1.: takes a single String as an argument
    // 2: writes the argument to the debug log
    // 3: returns the same string passed into the method, AFTER CONVERTING to lowercase

  }"

# **OPTIONAL**
# Following are variables that get initialized in the global scope of the execute anonymous transaction.
# They are NOT wrapped in a try/catch block. As such, it is recommended these either be initialized to null or a constant value.
globalVars:
  - SayHello sayHello; 
  - String s; 
  - String SPEAK_1 = 'Feel the power of ZS50...'; 
  - String SPEAK_2 = 'These are not the Strings you seek...'; 
  - String SPEAK_3;

# **OPTIONAL**
# Prevalidation executions are wrapped in a try/catch block, and are helpful for any pre-processing steps required for validations.
# steps. Often they will perform actions against global variables initialized above. 
executePrevalidation: 
  - sayHello = new SayHello();
  - SPEAK_3 = sayHello.sayMyName(); 

# **REQUIRED**
# At least one validation is required per pset. Each validation is wrapped in its own try/catch block. Valid keys include: 
#  - assert: (required) any of the Apex System.Assert() variants. 
#  - execute: (optional) steps to be completed prior to assertion. 
#  - invMsg: (optional) assertions that return false result in a system-thrown exception in Apex, which is returned by default. If a custom
#    exception message is desired, this value is any apex statement that evaluates to a single, valid String. 
validations:
  
  - execute: s = sayHello.sayHi();
    assert: system.assertEquals('Hello, World', s);
    invMsg: String.format('Expecting \'Hello, World\', received {0}', new List<Object>{ s });
  
  - assert: system.assertEquals(SPEAK_1.toLowerCase(), sayHello.speak(SPEAK_1)); 

  - assert: system.assertEquals(SPEAK_2.toLowerCase(), sayHello.speak(SPEAK_2)); 

  - assert: system.assertEquals(SPEAK_3.towLowerCase(), sayHello.speak(SPEAK_3)); 
     

  

...